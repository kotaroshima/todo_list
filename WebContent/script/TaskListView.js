// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jQuery', 'Underscore', 'Backbone', 'TaskListView', 'TaskView'], function($, _, Backbone, TaskListView, TaskView) {
    return TaskListView = (function(_super) {

      __extends(TaskListView, _super);

      function TaskListView() {
        return TaskListView.__super__.constructor.apply(this, arguments);
      }

      TaskListView.prototype.el = "#taskListView";

      TaskListView.prototype.initialize = function() {
        this.collection.on("add remove reset", this.render, this);
        pubsub.on("UPDATE_TASK_LIST", this.render, this);
        this._taskViews = [];
        return this;
      };

      TaskListView.prototype.render = function(options) {
        var models;
        models = this.collection.filter(options);
        this.clearTaskViews();
        if (models.length > 0) {
          _.each(models, this.addTaskView, this);
        } else {
          $(this.el).html("No Tasks");
        }
        return this;
      };

      TaskListView.prototype.addTaskView = function(task) {
        var view;
        view = new TaskView({
          model: task
        });
        $(this.el).append(view.render().$el);
        return this._taskViews.push(view);
      };

      TaskListView.prototype.clearTaskViews = function() {
        var i, _i, _ref, _results;
        _results = [];
        for (i = _i = _ref = this._taskViews.length - 1; _i >= 0; i = _i += -1) {
          _results.push(this.removeTaskView(i));
        }
        return _results;
      };

      TaskListView.prototype.removeTaskView = function(index) {
        this._taskViews[index].destroy();
        return this._taskViews.splice(index, 1);
      };

      TaskListView.prototype.destroy = function() {
        this.collection.off("add remove reset", this.render);
        pubsub.off("UPDATE_TASK_LIST", this.render, this);
        return Backbone.View.prototype.remove.call(this);
      };

      return TaskListView;

    })(Backbone.View);
  });

}).call(this);
