// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['Underscore', 'Backbone', 'TaskCollection', 'TaskModel'], function(_, Backbone, TaskCollection, TaskModel) {
    return TaskCollection = (function(_super) {

      __extends(TaskCollection, _super);

      function TaskCollection() {
        return TaskCollection.__super__.constructor.apply(this, arguments);
      }

      TaskCollection.prototype.model = TaskModel;

      TaskCollection.prototype.STORE_KEY = "TaskList";

      TaskCollection.prototype.localStorage = new Store(TaskCollection.STORE_KEY);

      TaskCollection.prototype.load = function(options) {
        var KEY_NAME, arr, models;
        KEY_NAME = "undefined";
        if (localStorage[KEY_NAME]) {
          arr = localStorage[KEY_NAME].split(",");
          models = _.map(arr, function(KEY) {
            return JSON.parse(localStorage[KEY_NAME + "-" + KEY]);
          });
        }
        return this.reset(models);
      };

      TaskCollection.prototype.filter = function(options) {
        var models, targetDate;
        models = this.models;
        if (options) {
          targetDate = options.date;
          if (targetDate) {
            models = models.filter(function(model) {
              return model.isCreatedAt(targetDate);
            });
          } else if (options.tag) {
            models = models.filter(function(model) {
              return model.hasTag(options.tag);
            });
          }
        }
        return models;
      };

      return TaskCollection;

    })(Backbone.Collection);
  });

}).call(this);
